import net.minecraftforge.gradle.common.tasks.SignJar
import org.apache.commons.io.FilenameUtils

plugins {
    id 'multiloader-loader'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")
    config("${mod_id}.common.mixins.json")
}

minecraft {
    mappings channel: 'official', version: minecraft_version
    copyIdeResources = true

    def at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformer = at
    }

    runs {
        client {
            workingDirectory file('runs/client')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('runs/server')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory file('runs/data')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

repositories {
    maven {
        url = "https://api.modrinth.com/maven"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Core dependencies
    implementation fg.deobf("com.mrcrayfish:framework-forge:${minecraft_version}-${framework_version}")

    // Runtime mods
    runtimeOnly fg.deobf("com.mrcrayfish:catalogue-forge:${minecraft_version}-1.9.1")
    compileOnly fg.deobf("maven.modrinth:farmers-delight:1.20.1-1.2.3")

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    compileOnly fg.deobf("com.blamejared.crafttweaker:CraftTweaker-common-${minecraft_version}:${crafttweaker_version}")
    runtimeOnly fg.deobf( "com.blamejared.crafttweaker:CraftTweaker-forge-${minecraft_version}:${crafttweaker_version}")

    annotationProcessor "org.spongepowered:mixin:0.8.5-SNAPSHOT:processor"
}

jar.finalizedBy('reobfJar')

tasks.register('signJar', SignJar) {
    dependsOn jar
    onlyIf {
        project.hasProperty('keyStore') || System.getenv("KEYSTORE")
    }
    keyStore = findProperty('keyStore') ?: System.getenv("KEYSTORE")
    alias = findProperty('keyStoreAlias') ?: System.getenv("KEYSTORE_ALIAS")
    storePass = findProperty('keyStorePass') ?: System.getenv("KEYSTORE_PASS")
    inputFile = jar.archiveFile
    def name = FilenameUtils.removeExtension(jar.archiveFile.get().getAsFile().getName());
    outputFile = layout.buildDirectory.file("libs/%s-signed.jar".formatted(name));
}

jar.finalizedBy 'signJar'
signJar.mustRunAfter 'reobfJar'

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}
